{"version":3,"sources":["login.svg","components/login/login.jsx","components/login/register.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","props","state","curTime","Date","toLocaleTimeString","plus","minus","count","mark","color","setInterval","tick","this","setState","Fragment","className","ref","containerRef","src","loginImg","htmlFor","type","name","placeholder","React","Component","Register","App","isLogginActive","rightSide","classList","remove","add","prevState","changeState","current","onClick","bind","RightSide","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.326792fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/login.8fe37a85.svg\";","import React from 'react';\r\nimport loginImg from '../../login.svg';\r\nimport './style.scss';\r\n\r\nclass Login extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            curTime: new Date().toLocaleTimeString(),\r\n            plus: 0,\r\n            minus:0,\r\n            count:0,\r\n            mark:true,\r\n            color: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval( () => this.tick()\r\n        ,1000)\r\n      }\r\n\r\n      tick(){\r\n        this.setState({\r\n            curTime : new Date().toLocaleTimeString()\r\n      });\r\n    }\r\n\r\n    //   componentWillUnmount(){\r\n    //       clearInterval(this.setInterval( () => {\r\n    //         this.setState({\r\n    //           curTime : new Date().toLocaleString()\r\n    //         })\r\n    //       },1000))\r\n    //   }\r\n    ////////////////////////////////////////////////////////////////////////\r\n    // onclick(type){\r\n    //     this.setState(prevState=>{\r\n    //         return{count: type=='add'? prevState.count+1:prevState.count-1}\r\n    //     });\r\n    //     console.log(this.state.plus)\r\n    // }\r\n    \r\n    // mark(){\r\n    //     this.setState((currentState)=>\r\n    //     ({mark:!currentState.mark}))\r\n    // }\r\n    \r\n\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n        <div className= \"base-container\" ref={this.props.containerRef}>\r\n            <div className='header'>\r\n                <div className ='header1'>\r\n                <div className='header2'>\r\n                    <h1>Login</h1>\r\n                </div></div>\r\n                <div className='tme1'>\r\n                        <div className='tme'>{this.state.curTime}\r\n                        </div>\r\n                </div>\r\n            </div>\r\n            <div className='content'>\r\n                <div className='image'>\r\n                    <img src={loginImg}></img>\r\n                </div>\r\n                <div className='form'>\r\n                    <div className='form-group'>\r\n                        <label htmlFor='username'>Username</label>\r\n                        <input type='text' name='username' placeholder='username'></input>\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <label htmlFor='password'>Password</label>\r\n                        <input type='password' name='password' placeholder='password'></input>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='footer'>\r\n                <button type=\"button\" className=\"btn btn-primary\">Login</button>\r\n            </div>\r\n            {/* <div className='btnsCon'>\r\n            <div className='btns'>\r\n            <div className={this.state.mark?'':'btnred'}>\r\n                <label>{this.state.count}</label>\r\n            </div>\r\n                <button type='button' className=\"btn btn-dark\" onClick={this.onclick.bind(this,'add')}>+</button>\r\n            </div>\r\n            <div className='btns'>\r\n                \r\n                <button type='button' className=\"btn btn-dark\" onClick={this.onclick.bind(this,'sub')}>-</button>\r\n            </div>\r\n            <div className='btns'>\r\n\r\n                <button type='button' className=\"btn btn-dark\" onClick={this.mark.bind(this)}>Mark</button>\r\n            </div>\r\n            <label>total</label>\r\n            </div> */}\r\n        </div>\r\n\r\n\r\n\r\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login","import React from 'react';\r\nimport loginImg from '../../login.svg';\r\nimport './style.scss';\r\n\r\nclass Register extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            curTime: new Date().toLocaleTimeString()\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval( () => this.tick()\r\n        ,1000)\r\n      }\r\n\r\n      tick(){\r\n        this.setState({\r\n            curTime : new Date().toLocaleTimeString()\r\n      });\r\n    }\r\n\r\n    //   componentWillUnmount(){\r\n    //       clearInterval(this.setInterval( () => {\r\n    //         this.setState({\r\n    //           curTime : new Date().toLocaleString()\r\n    //         })\r\n    //       },1000))\r\n    //   }\r\n\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n        <div className= \"base-container\" ref={this.props.containerRef}>\r\n            <div className='header'>\r\n                <div className ='header1'>\r\n                <div className='header2'>\r\n                    <h1>Register</h1>\r\n                </div></div>\r\n                <div className='tme1'>\r\n                        <div className='tme'>{this.state.curTime}\r\n                        </div>\r\n                </div>\r\n            </div>\r\n            <div className='content'>\r\n                <div className='image'>\r\n                    <img src={loginImg}></img>\r\n                </div>\r\n                <div className='form'>\r\n                    <div className='form-group'>\r\n                        <label htmlFor='username'>Username</label>\r\n                        <input type='text' name='username' placeholder='username'></input>\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <label htmlFor='username'>Email</label>\r\n                        <input type='email' name='email' placeholder='email'></input>\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <label htmlFor='password'>Password</label>\r\n                        <input type='password' name='password' placeholder='password'></input>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='footer'>\r\n                <button type=\"button\" className=\"btn btn-primary\">Login</button>\r\n            </div>\r\n        </div>\r\n        </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register","import React from 'react';\nimport './App.scss';\nimport Login from './components/login/login'\nimport Register from './components/login/register';\n\nclass App extends React.Component {\n  \n  constructor(props){\n    super(props);\n    this.state= {\n      isLogginActive: true,\n      \n    }\n  }\n  changeState(){\n    const {isLogginActive}= this.state;\n    if(isLogginActive){\n      this.rightSide.classList.remove('right');\n      this.rightSide.classList.add('left');\n    }else{\n      this.rightSide.classList.remove('left');\n      this.rightSide.classList.add('right');\n    }\n    this.setState((prevState)=>({ isLogginActive : !prevState.isLogginActive}))\n  }\n  componentDidMount(){\n    this.changeState();\n  }\n\n\n  render(){\n    const { isLogginActive }= this.state;\n    const current= isLogginActive ? \"Register\":'Login';\n\n    return (\n      <div className=\"App\">\n        <div className='login'>\n          <div className='container'>\n            {isLogginActive && (<Login containerRef={(ref)=>this.current=ref}/>) }\n            {!isLogginActive && (<Register containerRef={(ref)=>this.current=ref}/>) }\n          </div>\n          <RightSide current={current} containerRef={ref => this.rightSide = ref} onClick={this.changeState.bind(this)}/>\n        </div>\n      </div>\n  );\n}\n}\n\n\n\nconst RightSide= props =>{\n  return <div className='right-side' ref={props.containerRef} onClick={props.onClick}>\n    <div className='inner-container'>\n      <div className='text'>\n        {props.current}\n      </div>\n    </div>\n  </div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}